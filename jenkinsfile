pipeline {
    agent any

    tools {
        maven 'Maven3.8.4'
        jdk 'Java17'
    }

    triggers {
        githubPush()  // triggers pipeline on GitHub push
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Tomi7710/NG.git'
            }
        }

        stage('Build') {
            steps {
                sh "mvn clean package -DskipTests"
            }
        }
        
        stage('SonarQube Analysis') { 
            steps {
                withSonarQubeEnv('SonarQube') { // Jenkins SonarQube server name
                    sh 'mvn sonar:sonar'
                }
            }
        }

         stage('Quality Gate Check') { 
            steps {
                timeout(time: 5, unit: 'MINUTES') { // wait max 1 minute for SonarQube analysis
                    script {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to SonarQube quality gate failure: ${qg.status}"
                        } else {
                            echo "SonarQube quality gate passed: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                sh "mvn test"
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Cleanup Old Docker Container') {
    steps {
        script {
            sh '''
                if [ $(docker ps -q -f name=numberguessgame) ]; then
                    echo "Stopping old container..."
                    docker stop numberguessgame
                    docker rm numberguessgame
                fi
            '''
        }
    }
}

        stage('Docker Build & Deploy') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t numberguessgame:latest .'

                    // Run new container
                    sh 'docker run -d --name numberguessgame -p 8080:8080 numberguessgame:latest'                
                }
            }
        }

        stage('Verify Deployment') {
            steps {
        script {
            try {
                // Check HTTP status
                def response = sh(script: 'curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/', returnStdout: true).trim()
                if (response != '200') {
                    error "Deployment failed, HTTP status: ${response}"
                }

                // Check page content
                def content = sh(script: 'curl -s http://localhost:8080/', returnStdout: true).trim()
                if (!content.contains("Number Guessing Game")) {
                    error "Deployment verification failed: expected content not found"
                }

                echo "Deployment verified successfully. Application is running."
            } catch (err) {

                // Show container logs for debugging
                echo "Showing container logs for debugging:"
                sh 'docker logs numberguessgame'
                throw err
            }  
         }
      }
   }
}
post {
        success { // <-- email notification on success
            emailext(
                subject: "Jenkins Pipeline SUCCESS: ${currentBuild.fullDisplayName}",
                body: """The build, quality check, and deployment were successful.
Access the app here: http://localhost:8080/""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
        failure { // <-- email notification on failure
            emailext(
                subject: "Jenkins Pipeline FAILED: ${currentBuild.fullDisplayName}",
                body: """Oops! The pipeline failed.
This may be due to build errors, test failures, or SonarQube quality gate failure.
Check Jenkins logs for details.""",
                recipientProviders: [[$class: 'DevelopersRecipientProvider']]
            )
        }
    }
}
